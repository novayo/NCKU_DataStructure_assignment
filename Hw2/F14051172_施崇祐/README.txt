
程式執行流程 : 
	直接執行執行檔

程式架構 : 
	分成4個function
		* move()	-> 定義出數字從0~7所走的方向，並用point_1去跑，若沒跑到邊界外，則才會讓對應的arr_1[x][y] + 1
		* nonZero()     -> 確認是否陣列中的每個數值都是非0，是的話就回傳1，反之回傳0
		* print_arr()   -> 顯示出陣列的所有值以及步數
		* main()        -> 程式主要執行的位置

如何設計功能 :
	5  ~ 13行 -> 定義一些參數
	16 ~ 17行 -> 建立出陣列，把arr_1及arr_2設成global會比較好去做處理
	18 ~ 19行 -> 建立在陣列中一開始的位置(index=0及index=1分別代表x及y)，把point_1級point_2設成global會比較好去做處理
	21 ~ 23行 -> 宣告function
	
	/***** 進入main() *****/
	27 ~ 28行 -> 一開始先讓起始位置的那格數字+1
	     31行 -> 設定亂數種子

	/*** Question 1 ***/
	34 ~ 36行 -> 建立Q1的參數
		  -> i是用於for迴圈
		  -> Question=1 代表現在是Q1
		  -> Steps=0 代表紀錄步數目前為0
	37 ~ 43行 -> MAX_EXEC_TIMES 代表最大執行次數 = 50000
		  -> direction 用亂數取 0~7(在move()裡有定義代表的方向)
		  -> tmp 是要取得是否有move成功(因為跑到邊界外array會出現問題)，若成功回傳1，且讓對應array的位置+1，不成功回傳0
		  -> tmp 若有成功，則讓步數(Steps)+1，
		  -> tmp 若失敗則不讓步數(Steps)+1，但讓for迴圈次數(i)-1
		  -> 判斷是否全部都等於0，若全等於0，則break，不等於0就繼續跑
	     44行 -> 用print_arr顯示出符合格式的東西出來
	
	/*** Question 2 ***/
	47 ~ 57行 -> 功能都跟Q1的東西一樣
	     58行 -> return 0; 程式成功結束

	/***** 進入move() *****/
	     62行 -> 定義成unsigned，且參數設成move(現在是問題幾，1代表問題1，2代表問題2  ,  隨機產生的方向，數值為0~7)
	63 ~ 70行 -> 怕走了之後會超過邊界(range of array)，因此先記錄現在的位置，若超過邊界了就變回來並且回傳0(在145~154行)
	71 ~ 144行-> 使direction = 0~7分別在point_1及point_2(依照Question來判斷現在是問題幾)去改變數值	  
       145 ~ 154行-> 已經改變point_1或point_2的數值了，所以判斷是否有超過範圍，如果有就把值變回去，並且回傳0
       155 ~ 169行-> 執行到這裡表示point_1或point_2的值是合理的，故讓arr_1或arr_2的對應的位置+1
             160行-> 執行成功，回傳1

	/***** 進入nonZero() *****/
	     164行-> 定義成unsigned，且把參數設成nonZero(現在是問題幾，1代表問題1，2代表問題2)
       165 ~ 172行-> 依照是問題幾將row及col的上限設好(因為問題1跟2的陣列大小不同，這樣比較好處理)
       173 ~ 186行-> 用兩層迴圈去跑，只要有一個0就跳出迴圈，因為裡面那層跳出之後(175~180行)會進入外面那層，因此外面那層也要寫同樣的判斷式去跳出(181~185行)
       187 ~ 188行-> 若都沒有跳出迴圈，則i跟j分別都會等於上限值row跟col，就表示成功，回傳1
	          -> 若不等於表示有跳出，則失敗，回傳0

	/***** 進入print_arr() *****/
	     192行-> 定義成void，且參數設成print_arr(現在是問題幾，1代表問題1，2代表問題2  ,  執行總次數)
       194 ~ 201行-> 依照是問題幾將row及col的上限設好(因為問題1跟2的陣列大小不同，這樣比較好處理)
       202 ~ 203行-> 依照規定printf出來
       205 ~ 214行-> printf出所有陣列數值，且定義成4格，向右靠其，空白處補" "(最大可以顯示到9999格式都不會跑掉)
             215行-> print_arr結束